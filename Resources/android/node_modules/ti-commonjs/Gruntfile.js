(function(tirequire,__dirname,__filename){module.id=__filename;module.loaded=false;module.filename=__filename;var require=tirequire("node_modules/ti-commonjs/lib/ti-commonjs")(__dirname,module);module.require=require;function copyFileSync(src, dst) {
    fs.writeFileSync(dst, fs.readFileSync(src));
}

var exec = require("child_process").exec, fs = require("fs"), path = require("path"), wrench = require("wrench");

var NAME = "ti-commonjs", TMP_DIR = "tmp";

module.exports = function(grunt) {
    grunt.initConfig({
        mochaTest: {
            options: {
                require: [ "should" ],
                timeout: 3e3,
                ignoreLeaks: false,
                reporter: "spec"
            },
            src: [ "test/*_test.js" ]
        },
        jshint: {
            options: {
                jshintrc: true
            },
            src: [ "Gruntfile.js", "lib/**/*.js", "test/**/*.js" ]
        },
        titanium: {
            create: {
                options: {
                    command: "create",
                    name: TMP_DIR,
                    workspaceDir: ".",
                    platforms: [ "ios" ]
                }
            },
            build: {
                options: {
                    command: "build",
                    projectDir: TMP_DIR,
                    logLevel: "info"
                }
            }
        },
        alloy: {
            all: {
                options: {
                    command: "new",
                    args: [ TMP_DIR ]
                }
            }
        },
        clean: {
            src: [ TMP_DIR ]
        }
    });
    grunt.loadNpmTasks("grunt-contrib-jshint");
    grunt.loadNpmTasks("grunt-contrib-clean");
    grunt.loadNpmTasks("grunt-titanium");
    grunt.loadNpmTasks("grunt-alloy");
    grunt.registerTask("app-prep", "Load source files into example alloy app", function() {
        var done = this.async(), srcDir = path.join("test", "app"), dstDir = path.join(TMP_DIR, "app"), assetsDir = path.join(dstDir, "assets"), tmpAssetsDir = path.join(TMP_DIR, "assets"), libDir = path.join(dstDir, "lib"), tnrDir = path.join(libDir, "node_modules", NAME, "lib");
        grunt.log.write('Preparing test app at "%s"...', dstDir);
        fs.renameSync(assetsDir, tmpAssetsDir);
        wrench.copyDirSyncRecursive(srcDir, dstDir, {
            forceDelete: true
        });
        fs.renameSync(tmpAssetsDir, assetsDir);
        wrench.mkdirSyncRecursive(tnrDir, 493);
        copyFileSync(path.join("lib", NAME + ".js"), path.join(tnrDir, NAME + ".js"));
        copyFileSync(path.join("lib", "alloy.jmk"), path.join(dstDir, "alloy.jmk"));
        grunt.log.ok();
        exec('cd "' + libDir + '" && npm install', function(err) {
            if (err) return done(err);
            var fakeModuleDir = path.join(libDir, "node_modules", "fake_module");
            wrench.copyDirSyncRecursive(path.join("test", "fake_module"), fakeModuleDir);
            done();
        });
    });
    grunt.registerTask("app-create", [ "clean", "titanium:create", "alloy" ]);
    grunt.registerTask("test", [ "app-create", "app-prep", "titanium:build" ]);
    grunt.registerTask("default", [ "jshint", "test" ]);
};
module.loaded=true;})(require,"/node_modules/ti-commonjs","/node_modules/ti-commonjs/Gruntfile.js");