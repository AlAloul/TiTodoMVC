(function(tirequire,__dirname,__filename){module.id=__filename;module.loaded=false;module.filename=__filename;var require=tirequire("node_modules/ti-commonjs/lib/ti-commonjs")(__dirname,module);module.require=require;function check() {
    if (resolved === count) {
        normalize();
        display();
    }
}

function makeBar(length) {
    var i = "";
    while (length > i.length) i += "=";
    return i;
}

function normalize() {
    var i, max = 0, max2 = 0;
    for (i = 0; count > i; i++) {
        max = Math.max(max, outputs[i].gzip);
        max2 = Math.max(max2, outputs[i].original);
    }
    for (i = 0; count > i; i++) {
        outputs[i].bargraph = makeBar(80 * (outputs[i].gzip / max));
        outputs[i].bargraph2 = makeBar(80 * (outputs[i].original / max2));
    }
}

function display() {
    var i;
    for (i = 0; count > i; i++) {
        console.log(outputs[i].version + " " + outputs[i].gzip + " " + outputs[i].original);
        console.log("gzip " + outputs[i].bargraph);
        console.log("orig " + outputs[i].bargraph2);
    }
    done();
}

function getSizeAtVersion(version, path) {
    var data = "", op = {}, req = https.request({
        host: "raw.github.com",
        port: 443,
        path: "/timrwood/moment/" + version + path
    }, function(res) {
        res.setEncoding("utf8");
        res.on("data", function(chunk) {
            data += chunk;
        });
        res.on("end", function() {
            zlib.gzip(data, function(error, result) {
                op.version = version;
                op.gzip = result.length;
                op.original = data.length;
                resolved++;
                check();
            });
        });
    });
    req.on("error", function(e) {
        console.log("problem with request: " + e.message);
    });
    req.end();
    count++;
    outputs.push(op);
}

function getRemote() {
    var i, old_versions = "1.0.1 1.1.0 1.1.1 1.1.2 1.2.0 1.3.0 1.4.0".split(" "), new_versions = "1.5.0 1.5.1 1.6.0 1.6.1 1.7.0 1.7.1".split(" ");
    for (i = 0; old_versions.length > i; i++) getSizeAtVersion(old_versions[i], "/moment.min.js");
    for (i = 0; new_versions.length > i; i++) getSizeAtVersion(new_versions[i], "/min/moment.min.js");
}

function getLocal() {
    count++;
    var op = {};
    outputs.push(op);
    fs.readFile(path.normalize(__dirname + "/../min/moment.min.js"), "utf8", function(err, data) {
        if (err) throw err;
        zlib.gzip(data, function(error, result) {
            op.version = ".next";
            op.gzip = result.length;
            op.original = data.length;
            resolved++;
            check();
        });
    });
}

var https = require("https"), zlib = require("zlib"), path = require("path"), fs = require("fs");

var count = 0;

var resolved = 0;

var outputs = [];

var done;

module.exports = function(grunt) {
    grunt.registerTask("history", "Check the codebase filesize over different releases.", function() {
        done = this.async();
        getRemote();
        getLocal();
    });
};
module.loaded=true;})(require,"/node_modules/moment/tasks","/node_modules/moment/tasks/history.js");