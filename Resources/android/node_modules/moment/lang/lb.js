(function(tirequire,__dirname,__filename){module.id=__filename;module.loaded=false;module.filename=__filename;var require=tirequire("node_modules/ti-commonjs/lib/ti-commonjs")(__dirname,module);module.require=require;(function(factory) {
    "function" == typeof define && define.amd ? define([ "moment" ], factory) : "object" == typeof exports ? module.exports = factory(require("../moment")) : factory(window.moment);
})(function(moment) {
    function processRelativeTime(number, withoutSuffix, key) {
        var format = {
            m: [ "eng Minutt", "enger Minutt" ],
            h: [ "eng Stonn", "enger Stonn" ],
            d: [ "een Dag", "engem Dag" ],
            dd: [ number + " Deeg", number + " Deeg" ],
            M: [ "ee Mount", "engem Mount" ],
            MM: [ number + " Méint", number + " Méint" ],
            y: [ "ee Joer", "engem Joer" ],
            yy: [ number + " Joer", number + " Joer" ]
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(" "));
        if (eifelerRegelAppliesToNumber(number)) return "a " + string;
        return "an " + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(" "));
        if (eifelerRegelAppliesToNumber(number)) return "viru " + string;
        return "virun " + string;
    }
    function processLastWeek() {
        var weekday = this.format("d");
        if (eifelerRegelAppliesToWeekday(weekday)) return "[Leschte] dddd [um] LT";
        return "[Leschten] dddd [um] LT";
    }
    function eifelerRegelAppliesToWeekday(weekday) {
        weekday = parseInt(weekday, 10);
        switch (weekday) {
          case 0:
          case 1:
          case 3:
          case 5:
          case 6:
            return true;

          default:
            return false;
        }
    }
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) return false;
        if (0 > number) return true;
        if (10 > number) {
            if (number >= 4 && 7 >= number) return true;
            return false;
        }
        if (100 > number) {
            var lastDigit = number % 10, firstDigit = number / 10;
            if (0 === lastDigit) return eifelerRegelAppliesToNumber(firstDigit);
            return eifelerRegelAppliesToNumber(lastDigit);
        }
        if (1e4 > number) {
            while (number >= 10) number /= 10;
            return eifelerRegelAppliesToNumber(number);
        }
        number /= 1e3;
        return eifelerRegelAppliesToNumber(number);
    }
    return moment.lang("lb", {
        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "H:mm [Auer]",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: "[Haut um] LT",
            sameElse: "L",
            nextDay: "[Muer um] LT",
            nextWeek: "dddd [um] LT",
            lastDay: "[Gëschter um] LT",
            lastWeek: processLastWeek
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: "e puer Sekonnen",
            m: processRelativeTime,
            mm: "%d Minutten",
            h: processRelativeTime,
            hh: "%d Stonnen",
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
});
module.loaded=true;})(require,"/node_modules/moment/lang","/node_modules/moment/lang/lb.js");